#!/usr/bin/env bash
shopt -s extglob

# ==================== INCLUDES ====================
for f in $(dirname "$0")/include/*.sh; do source $f; done

# ==================== USAGE ====================
USAGE=$(cat << EOF
Usage: $0 [options] [tool1 tool2 ...]
$(bold;underline)Options:$(reset)
  $(bold)-s, --simulate$(reset)    Simulate the installation without making changes
  $(bold)-R, --restow$(reset)      Restow all directories, even if they are already stowed
  $(bold)-h, --help$(reset)        Show this help message
EOF
)

SIMULATE=false
RESTOW=false
tool_args=()

# Parse options and collect tool names
for arg in "$@"; do
    case "$arg" in
    -h|--help)
        echo "$USAGE";
        exit 0
        ;;
    -R|--restow) RESTOW=true ;;
    -s|--simulate) SIMULATE=true ;;
    -*|--*)
        echo "Error: Unsupported flag $1" >&2
        exit 1
        ;;
    *) 
        if [[ " $(echo */) " =~ " ${arg%/}/ "  ]]; then
            tool_args+=("$arg") 
        else
            echo "Error: Invalid argument $arg" >&2;
            exit 1 
        fi ;;
    esac
done

# Set DIRS to tool_args if any, else to all directories
DIRS=($(
    [[ ${#tool_args[@]} -gt 0 ]] \
    && echo "${tool_args[@]}"    \
    || echo !(include|backups|test)/
))

# ==================== CONFIG ====================
# Create temp file for use, and set cleanup on script exit
TEMP_FILE=$(mktemp) ; trap 'rm -f "$TEMP_FILE"' EXIT

# ==================== UTILS ====================

function log() {
    local original_args=("$@")
    [[ "$1" == "echo" ]] && shift;

    printf "   "
    if [[ $SIMULATE == true ]]; then
        echo -n "$(yellow)$@$(reset)"
        return -1
    else
        echo "$@"
        ${original_args[@]} >/dev/null
        return 0
    fi
}

# Fix for stow bug
# Apply colors to stow output
function stow {\
    local opts="-t$HOME -v  --dotfiles --ignore=install"
    [[ $SIMULATE == true ]] && opts+=" --simulate";
    [[ $RESTOW == true ]] && opts+=" --restow";

    command stow $opts "$@" 2> >(
        sed '/BUG in find_stowed_path?/d' \
        | sed 's/=>/->/g' \
        | sed "s/^LINK\: /$(echo "$(green)    LINK: $(reset)")/g" \
        | sed "s/^UNLINK\: /$(echo "$(small;green)  UNLINK: $(reset)")/g" \
        | sed "s/^WARNING\: /$(echo "$(yellow) WARNING: $(reset)")/g" \
        | sed "s/^WARNING\! /$(echo "$(bold;red) WARNING! $(reset)")/g" \
        >"$TEMP_FILE"
    )
    $(
        cat "$TEMP_FILE" \
        | sed 's/\x1b\[[0-9;]*[mGKH]//g' \
        | rg -q 'WARNING! stowing \w* would cause conflicts'
    ) && return 2;
    
    cat "$TEMP_FILE";
    [[ $? -ne 0 ]] && return 1;
    return 0;
}

# ==================== Implementation ====================

# Function to backup directories
function backup_files() {
    local files=($(sed 's/ /\n/g' <(echo "$1")))

    local backup_root="backups"

    mkdir -p "$backup_root"
    
    # Process each conflicting file
    for target in "${files[@]}"; do
        target=$(echo "$target" | sed 's/\x1b\[[0-9;]*[mGKH]//g')
        target_path="$HOME/$target"
        
        if [[ -f "$target_path" && ! -L "$target_path" ]]; then
            if [[ $SIMULATE == true ]]; then
                echo "$(yellow)Backing up file: $target_path$(reset)"
            else
                echo "Backing up file: $target_path"
                # Use the full path from home directory for backup structure
                local rel_path="${target#$HOME/}"
                local backup_path="$backup_root/$(dirname "$rel_path")"
                mkdir -p "$backup_path"
                mv "$target_path" "$backup_path/"
                # echo "\t$target -> $backup_root/$target"
            fi
        fi
    done
}

function install_dir() {
    local dir="$1"
    
    center '-' 40 " $(cyan;bold)$dir$(reset) ";
        
    if [[ -f "$(dir)/install" ]]; then
        pushd "$dir" > /dev/null
        source ./install "$@"
        popd > /dev/null
    fi


    stow "$dir"

    case "$?" in
        0)  ;;
        1)  echo "$(bold;red)Install failed$(reset)" ;;
        2)
            local conflicts=$(rg 'existing target is neither a link nor a directory: (\S*)' -or '$1' "$TEMP_FILE" | sort | uniq )
            echo "$(bold)Install Conflicts:$(reset)"
            echo "$(small)    backing up...$(reset)"
            for c in $conflicts; do echo -e "\t$(small)~/$c$(reset)"; done
            backup_files "$conflicts"
            if ! stow "$dir" && [[ $SIMULATE == false ]]; then exit -1; fi
            ;;
    esac
}

function main() {
    check_cmds stow rg

    [[ $SIMULATE == true ]] \
        && echo "$(yellow;bold)Installing Dotfiles... (Simulating)$(reset)" \
        || echo "$(bold)Installing Dotfiles...$(reset)"

    for d in "${DIRS[@]}"; do
        local dir="${d%/}"

        install_dir "$dir"
    done
}


main "$@"